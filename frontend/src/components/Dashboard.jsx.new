import React, { useEffect, useState, useCallback } from "react";
import { Calendar, Clock, MapPin, Users, DollarSign, Edit, Trash2, Eye, BarChart, AlertCircle, RefreshCw } from "lucide-react";
import "./styles/Dashboard.css";

const Dashboard = () => {
  // State declarations
  const [createdEvents, setCreatedEvents] = useState([]);
  const [registeredEvents, setRegisteredEvents] = useState([]);
  const [stats, setStats] = useState({
    totalEvents: 0,
    upcomingEvents: 0,
    totalRegistrations: 0,
    totalRevenue: 0
  });
  const [activeTab, setActiveTab] = useState('created');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [retryCount, setRetryCount] = useState(0);
  const [isRetrying, setIsRetrying] = useState(false);

  // Constants and user data
  const userStr = localStorage.getItem('user');
  const user = userStr ? JSON.parse(userStr) : null;
  const token = localStorage.getItem('token');
  const MAX_RETRIES = 3;
  const FETCH_TIMEOUT = 10000; // 10 seconds timeout

  // Check if server is responding
  const checkServer = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/health', {
        signal: AbortSignal.timeout(5000) // 5 second timeout for health check
      });
      return response.ok;
    } catch {
      return false;
    }
  };

  // Main data fetching function
  const fetchDashboardData = useCallback(async () => {
    let timeoutId;
    const controller = new AbortController();

    try {
      setLoading(true);
      setError(null);

      // Check server health first
      const serverIsUp = await checkServer();
      if (!serverIsUp) {
        throw new Error('Server is not responding. Please try again later.');
      }

      // Set up timeout for main request
      const timeoutPromise = new Promise((_, reject) => {
        timeoutId = setTimeout(() => {
          controller.abort();
          reject(new Error('Request timed out'));
        }, FETCH_TIMEOUT);
      });

      // Main fetch request
      const fetchPromise = fetch(`http://localhost:5000/api/dashboard/${user?._id}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      });

      // Race between fetch and timeout
      const response = await Promise.race([fetchPromise, timeoutPromise]);
      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(
          response.status === 401 ? 'Your session has expired' :
          response.status === 403 ? 'Access denied' :
          response.status === 404 ? 'Data not found' :
          'Failed to load dashboard data'
        );
      }

      const data = await response.json();
      
      // Update state with fetched data
      setCreatedEvents(data.createdEvents || []);
      setRegisteredEvents(data.registeredEvents || []);
      setStats({
        totalEvents: data.stats.totalEvents || 0,
        upcomingEvents: data.stats.upcomingEvents || 0,
        totalRegistrations: data.stats.totalRegistrations || 0,
        totalRevenue: data.stats.totalRevenue || 0
      });
      
      setRetryCount(0);
      setIsRetrying(false);
      setError(null);
    } catch (err) {
      console.error('Dashboard fetch error:', err);

      if (err.message === 'Your session has expired') {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        window.location.href = '/login';
        return;
      }

      setError(err.message);

      if (retryCount < MAX_RETRIES) {
        setIsRetrying(true);
        setRetryCount(prev => prev + 1);
        setTimeout(() => fetchDashboardData(), 2000);
      } else {
        setIsRetrying(false);
      }
    } finally {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      if (!isRetrying) {
        setLoading(false);
      }
    }
  }, [user?._id, token, retryCount]);

  // Initialize dashboard on mount
  useEffect(() => {
    let isActive = true;

    const initDashboard = async () => {
      if (!user || !token) {
        setError('Please log in to access your dashboard.');
        setLoading(false);
        return;
      }

      if (!user._id) {
        setError('Invalid user data. Please try logging in again.');
        setLoading(false);
        return;
      }

      if (isActive) {
        await fetchDashboardData();
      }
    };

    initDashboard();

    return () => {
      isActive = false;
    };
  }, [user, token, fetchDashboardData]);

  // Event deletion handler
  const handleDeleteEvent = async (eventId) => {
    if (!window.confirm('Are you sure you want to delete this event?')) {
      return;
    }

    try {
      const response = await fetch(`http://localhost:5000/api/events/${eventId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error('Failed to delete event');
      }

      await fetchDashboardData();
    } catch (err) {
      setError(err.message);
    }
  };

  const formatDate = (dateStr) => {
    return new Date(dateStr).toLocaleDateString('en-US', {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  // Render states
  if (!user || !token) {
    return (
      <div className="dashboard-error">
        <AlertCircle size={48} />
        <h2>Authentication Required</h2>
        <p>Please log in to access your dashboard.</p>
        <button onClick={() => window.location.href = '/login'}>
          Go to Login
        </button>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="dashboard-loading">
        <div className="loading-spinner"></div>
        <p>Loading your dashboard...</p>
        {isRetrying ? (
          <p className="retry-message">
            Retry attempt {retryCount} of {MAX_RETRIES}...
          </p>
        ) : (
          <p className="timeout-message">
            Request will timeout in {Math.ceil(FETCH_TIMEOUT/1000)} seconds
          </p>
        )}
      </div>
    );
  }

  if (error) {
    return (
      <div className="dashboard-error">
        <AlertCircle size={48} />
        <h2>Oops! Something went wrong</h2>
        <p>{error}</p>
        {retryCount < MAX_RETRIES ? (
          <button 
            onClick={() => fetchDashboardData()} 
            disabled={isRetrying}
          >
            <RefreshCw size={16} /> {isRetrying ? 'Retrying...' : 'Retry'}
          </button>
        ) : (
          <button onClick={() => window.location.href = '/login'}>
            Return to Login
          </button>
        )}
      </div>
    );
  }

  // Main dashboard render
  return (
    <div className="dashboard-container">
      {/* Header Section */}
      <div className="dashboard-header">
        <div className="header-content">
          <h1>Welcome back, {user?.name || 'User'}!</h1>
          <p>Manage your events and check your registrations</p>
        </div>
        <button 
          className="create-event-btn"
          onClick={() => window.location.href="/create-event"}
        >
          + Create New Event
        </button>
      </div>

      {/* Stats Section */}
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon purple">
            <Calendar size={24} />
          </div>
          <div className="stat-content">
            <h3>Total Events</h3>
            <p>{stats.totalEvents}</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon blue">
            <BarChart size={24} />
          </div>
          <div className="stat-content">
            <h3>Upcoming Events</h3>
            <p>{stats.upcomingEvents}</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon green">
            <Users size={24} />
          </div>
          <div className="stat-content">
            <h3>Total Registrations</h3>
            <p>{stats.totalRegistrations}</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon orange">
            <DollarSign size={24} />
          </div>
          <div className="stat-content">
            <h3>Total Revenue</h3>
            <p>${stats.totalRevenue}</p>
          </div>
        </div>
      </div>

      {/* Tabs Section */}
      <div className="dashboard-tabs">
        <button 
          className={`tab-btn ${activeTab === 'created' ? 'active' : ''}`}
          onClick={() => setActiveTab('created')}
        >
          Events Created by You
        </button>
        <button 
          className={`tab-btn ${activeTab === 'registered' ? 'active' : ''}`}
          onClick={() => setActiveTab('registered')}
        >
          Events You're Attending
        </button>
      </div>

      {/* Events Grid */}
      <div className="events-container">
        {activeTab === 'created' ? (
          <div className="events-grid">
            {createdEvents.length === 0 ? (
              <div className="no-events">
                <h3>No events created yet</h3>
                <p>Start by creating your first event!</p>
              </div>
            ) : (
              createdEvents.map(event => (
                <div key={event._id} className="event-card">
                  <div className="event-image">
                    <img 
                      src={event.image ? `http://localhost:5000/uploads/${event.image}` : 'default-event-image.jpg'} 
                      alt={event.eventName} 
                      onError={(e) => {
                        e.target.src = 'default-event-image.jpg';
                      }}
                    />
                    <div className="event-badge">{event.category}</div>
                  </div>
                  <div className="event-content">
                    <h3>{event.eventName}</h3>
                    <div className="event-details">
                      <p><Calendar size={16} /> {formatDate(event.date)}</p>
                      <p><Clock size={16} /> {event.time}</p>
                      <p><MapPin size={16} /> {event.location}</p>
                    </div>
                    <div className="tickets-info">
                      <div>
                        <span className="ticket-label">VIP</span>
                        <span className="ticket-price">${event.tickets.vip.price}</span>
                      </div>
                      <div>
                        <span className="ticket-label">Regular</span>
                        <span className="ticket-price">${event.tickets.normal.price}</span>
                      </div>
                    </div>
                    <div className="event-actions">
                      <button 
                        className="action-btn view"
                        onClick={() => window.location.href = `/event/${event._id}`}
                      >
                        <Eye size={16} /> View
                      </button>
                      <button 
                        className="action-btn edit"
                        onClick={() => window.location.href = `/edit-event/${event._id}`}
                      >
                        <Edit size={16} /> Edit
                      </button>
                      <button 
                        className="action-btn delete"
                        onClick={() => handleDeleteEvent(event._id)}
                      >
                        <Trash2 size={16} /> Delete
                      </button>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        ) : (
          <div className="events-grid">
            {registeredEvents.length === 0 ? (
              <div className="no-events">
                <h3>No registered events</h3>
                <p>Browse events and register for ones you're interested in!</p>
              </div>
            ) : (
              registeredEvents.map(event => (
                <div key={event._id} className="event-card">
                  <div className="event-image">
                    <img 
                      src={event.image ? `http://localhost:5000/uploads/${event.image}` : 'default-event-image.jpg'} 
                      alt={event.eventName}
                      onError={(e) => {
                        e.target.src = 'default-event-image.jpg';
                      }}
                    />
                    <div className="event-badge">{event.category}</div>
                  </div>
                  <div className="event-content">
                    <h3>{event.eventName}</h3>
                    <div className="event-details">
                      <p><Calendar size={16} /> {formatDate(event.date)}</p>
                      <p><Clock size={16} /> {event.time}</p>
                      <p><MapPin size={16} /> {event.location}</p>
                    </div>
                    <div className="ticket-type">
                      Your ticket: {event.registrationType || 'Regular'}
                    </div>
                    <button 
                      className="view-details-btn"
                      onClick={() => window.location.href = `/event/${event._id}`}
                    >
                      View Details
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;